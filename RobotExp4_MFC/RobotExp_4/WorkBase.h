//////////////////////////////////////////////////////////////////////////////////////////////////////////
// File		: WorkBase.h
// Version	: 1.0.1
// Date		: 2019.08.20
// Writer	: Lee, Seungmin (CDSL)
//////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef _WORKBASE_H__
#define _WORKBASE_H__

//include//
#include <string>


//Forward Definition for setting friend class and defining worker pointer.
class CThreadedWorker;


//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Name	: CWorkBase
// Summury		: Work base class.
//////////////////////////////////////////////////////////////////////////////////////////////////////////
class CWorkBase {

	// Define ////////////////////////////////////////////////////////
public:

protected:

private:


	// Method ////////////////////////////////////////////////////////
public:
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: CWorkBase
	// Input	: Work name(std::string)
	// Output	: None
	// Summury	: Constructor.
	////////////////////////////////////////////////////////////////////////////////////////////
	CWorkBase(std::string name) :
		_workName(name)
	{

	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: ~CWorkBase
	// Input	: None
	// Output	: None
	// Summury	: Standard destructor
	////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~CWorkBase() {

	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: SetWorkName
	// Input	: Work name(std::string)
	// Output	: None
	// Summury	: Set work name.
	////////////////////////////////////////////////////////////////////////////////////////////
	void SetWorkName(std::string name) {
		_workName = name;
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: GetWorkName
	// Input	: None
	// Output	: Work name(std::string)
	// Summury	: Return work name.
	////////////////////////////////////////////////////////////////////////////////////////////
	std::string GetWorkName() {
		return _workName;
	}


protected:
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _execute(virtual)
	// Input	: None
	// Output	: None
	// Summury	: Work Function(virtual). Must override in child class.
	////////////////////////////////////////////////////////////////////////////////////////////
	virtual void _execute() = 0;


private:

	friend CThreadedWorker;
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _setWorker(friend CThreadedWorker)
	// Input	: Worker address(CThreadedWorker*)
	// Output	: None
	// Summury	: Set worker address. Only CThreadedWorker class can call this method.
	////////////////////////////////////////////////////////////////////////////////////////////
	void _setWorker(CThreadedWorker* poWorker) {
		_poWorker = poWorker;
	}



	friend CThreadedWorker;
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _executeWork(friend CThreadedWorker)
	// Input	: None
	// Output	: None
	// Summury	: Execute Work. Only CThreadedWorker class can call this method.
	////////////////////////////////////////////////////////////////////////////////////////////
	void _executeWork() {
		_execute();
	}

	// Member ////////////////////////////////////////////////////////
public:

protected:

private:
	std::string _workName;
	CThreadedWorker* _poWorker;
};

#endif