//////////////////////////////////////////////////////////////////////////////////////////////////////////
// File		: WorkBase.h
// Version	: 1.0.1
// Date		: 2019.08.20
// Writer	: Lee, Seungmin (CDSL)
//////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef _THREADWORKER_H__
#define _THREADWORKER_H__


//include//
#include "WorkBase.h"



//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Name	: CThreadedWorker
// Summury		: Threaded Worker class.
//////////////////////////////////////////////////////////////////////////////////////////////////////////
class CThreadedWorker {

	// Define ////////////////////////////////////////////////////////
public:

protected:

private:
	class _CThreadedWorker;

	// Method ////////////////////////////////////////////////////////
public:
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: CThreadedWorker
	// Input	: None
	// Output	: None
	// Summury	: Standard constructor
	////////////////////////////////////////////////////////////////////////////////////////////
	CThreadedWorker();



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: ~CThreadedWorker
	// Input	: None
	// Output	: None
	// Summury	: Standard destructor
	////////////////////////////////////////////////////////////////////////////////////////////
	~CThreadedWorker();



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: SetWork
	// Input	: work pointer(CWorkBase*)
	// Output	: Result(bool)
	// Summury	: Set Work address.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool SetWork(CWorkBase* poWork);

	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: GetPeriod
	// Input	: None
	// Output	: Work Pointer(CWorkBase*)
	// Summury	: Set work address
	////////////////////////////////////////////////////////////////////////////////////////////
	CWorkBase* GetWork();


	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: StartWork
	// Input	: None
	// Output	: Result(bool)
	// Summury	: Start Worker thread.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool StartWork();



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: StopWork
	// Input	: None
	// Output	: Result(bool)
	// Summury	: Stop Worker thread.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool StopWork();



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: isRunning
	// Input	: None
	// Output	: Running state flag(bool)
	// Summury	: Return running flag.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool isRunning();



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: SetPeriod
	// Input	: Period time(s)(double)
	// Output	: None
	// Summury	: Set period. t(s)
	////////////////////////////////////////////////////////////////////////////////////////////
	void SetPeriod(double t);



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: GetPeriod
	// Input	: None
	// Output	: Period time(s)(double)
	// Summury	: Return period. t(s)
	////////////////////////////////////////////////////////////////////////////////////////////
	double GetPeriod();

	

protected:

private:



	// Member ////////////////////////////////////////////////////////
public:

protected:

private:
	_CThreadedWorker *_poWorker;

};


//////////////////////////////////////////
template <typename T>
class CWorkCreator {

public:
	static T* CreateWork(std::string workName) {

		return new T(workName);
	}
};
/////////////////////////////////////////////


template <typename T>
inline T* CreateWork(std::string workName) {

	return new T(workName);
}

#endif