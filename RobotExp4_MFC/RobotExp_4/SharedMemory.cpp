//////////////////////////////////////////////////////////////////////////////////////////////////////
// File		: SharedMemory.cpp
// Version	: 1.0.1
// Date		: 2019.08.20
// Writer	: Lee, Seungmin (CDSL)
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "SharedMemory.h"

#include <mutex>


//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Name	: _CAnsySharedMemory
// Summury		: private class in CAnsySharedMemory. Ansynchronous Shared memory(theard unsafety)
//////////////////////////////////////////////////////////////////////////////////////////////////////////
class CAnsySharedMemory::_CAnsySharedMemory {

	// Define ////////////////////////////////////////////////////////
public:

protected:

private:


	// Method ////////////////////////////////////////////////////////
public:
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _CAnsySharedMemory
	// Input	: None
	// Output	: None
	// Summury	: Standard constructor
	////////////////////////////////////////////////////////////////////////////////////////////
	_CAnsySharedMemory() :
		_size(-1), _poMemory(0) {

	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: ~_CAnsySharedMemory
	// Input	: None
	// Output	: None
	// Summury	: Standard destructor
	////////////////////////////////////////////////////////////////////////////////////////////
	~_CAnsySharedMemory() {

		_deleteMemory();
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: CreateSharedMemory
	// Input	: Memory size(int)
	// Output	: result(bool)
	// Summury	: Create memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool CreateSharedMemory(int size) {

		_deleteMemory();
		return _createMemory(size);
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: GetSharedMemory
	// Input	: Memory pointer(void*)
	// Output	: None
	// Summury	: Copy class member memory to 'buf'.
	////////////////////////////////////////////////////////////////////////////////////////////
	void GetSharedMemory(void* buf) {

		memcpy(buf, _poMemory, _size);
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: SetSharedMemory
	// Input	: Memory pointer(void*)
	// Output	: None
	// Summury	: Copy 'buf' to class member memory.
	////////////////////////////////////////////////////////////////////////////////////////////
	void SetSharedMemory(void* buf) {

		memcpy(_poMemory, buf, _size);
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: GetSharedMemory
	// Input	: None
	// Output	: size of class member memory block(int)
	// Summury	: return size of memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	int GetSharedMemorySize() {
		return _size;
	}

protected:

private:
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: operator =
	// Input	: src(_CAnsySharedMemory&)
	// Output	: None
	// Summury	: This method is for blocking copy this class to other.
	////////////////////////////////////////////////////////////////////////////////////////////
	void operator = (_CAnsySharedMemory& src) {}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _createMemory
	// Input	: Memory size(int)
	// Output	: result(bool)
	// Summury	: Create memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool _createMemory(int size) {

		_poMemory = malloc(size);
		if (!_poMemory) return false;

		memset(_poMemory, 0, size);

		return true;
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _deleteMemory
	// Input	: None
	// Output	: None
	// Summury	: Delete memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	void _deleteMemory() {

		if (_poMemory) {
			free(_poMemory);
			_size = -1;
			_poMemory = 0;
		}
	}




	// Member ////////////////////////////////////////////////////////
public:

protected:

private:
	int _size;
	void* _poMemory;
};


CAnsySharedMemory::CAnsySharedMemory()
{
	_poAnsyMemory = new _CAnsySharedMemory;
}


CAnsySharedMemory::~CAnsySharedMemory()
{
	delete _poAnsyMemory;
}


bool CAnsySharedMemory::CreateSharedMemory(int size) {

	return _poAnsyMemory->CreateSharedMemory(size);
}



void CAnsySharedMemory::GetSharedMemory(void* buf) {

	_poAnsyMemory->GetSharedMemory(buf);
}



void CAnsySharedMemory::SetSharedMemory(void* buf) {

	_poAnsyMemory->SetSharedMemory(buf);
}



int CAnsySharedMemory::GetSharedMemorySize() {

	return _poAnsyMemory->GetSharedMemorySize();
}





//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Name	: _CSyncSharedMemory
// Summury		: private class in CSyncSharedMemory. Synchronous Shared memory(theard safety)
//////////////////////////////////////////////////////////////////////////////////////////////////////////
class CSyncSharedMemory::_CSyncSharedMemory {

	// Define ////////////////////////////////////////////////////////
public:

protected:

private:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Class Name	: _CEasyMutex
	// Summury		: private class in _CSyncSharedMemory. Auto lock and unlock mutex.
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	class _CEasyMutex {

		// Define ////////////////////////////////////////////////////////
	public:

	protected:

	private:


		// Method ////////////////////////////////////////////////////////
	public:
		////////////////////////////////////////////////////////////////////////////////////////////
		// Method	: _CEasyMutex
		// Input	: None
		// Output	: None
		// Summury	: Standard constructor. Auto lock.
		////////////////////////////////////////////////////////////////////////////////////////////
		_CEasyMutex(std::mutex *poMutex) :
			_poMutex(poMutex) {
			_poMutex->lock();
		}



		////////////////////////////////////////////////////////////////////////////////////////////
		// Method	: ~_CEasyMutex
		// Input	: None
		// Output	: None
		// Summury	: Standard destructor. Auto unlock.
		////////////////////////////////////////////////////////////////////////////////////////////
		~_CEasyMutex() {
			_poMutex->unlock();
		}


	protected:

	private:


		// Member ////////////////////////////////////////////////////////
	public:

	protected:

	private:
		std::mutex *_poMutex;
	};

	// Method ////////////////////////////////////////////////////////
public:
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _CSyncSharedMemory
	// Input	: None
	// Output	: None
	// Summury	: Standard constructor
	////////////////////////////////////////////////////////////////////////////////////////////
	_CSyncSharedMemory() :
		_size(-1), _poMemory(0) {

	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: ~_CSyncSharedMemory
	// Input	: None
	// Output	: None
	// Summury	: Standard destructor
	////////////////////////////////////////////////////////////////////////////////////////////
	~_CSyncSharedMemory() {

		_deleteMemory();
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: CreateSharedMemory
	// Input	: Memory size(int)
	// Output	: result(bool)
	// Summury	: Create memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool CreateSharedMemory(int size) {

		_deleteMemory();
		return _createMemory(size);
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: GetSharedMemory
	// Input	: Memory pointer(void*)
	// Output	: None
	// Summury	: Copy class member memory to 'buf'.
	////////////////////////////////////////////////////////////////////////////////////////////
	void GetSharedMemory(void* buf) {

		_CEasyMutex mutex(&_mutex);
		memcpy(buf, _poMemory, _size);
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: SetSharedMemory
	// Input	: Memory pointer(void*)
	// Output	: None
	// Summury	: Copy 'buf' to class member memory.
	////////////////////////////////////////////////////////////////////////////////////////////
	void SetSharedMemory(void* buf) {

		_CEasyMutex mutex(&_mutex);
		memcpy(_poMemory, buf, _size);
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: GetSharedMemory
	// Input	: None
	// Output	: size of class member memory block(int)
	// Summury	: return size of memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	int GetSharedMemorySize() {
		return _size;
	}

protected:

private:
	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: operator =
	// Input	: src(_CSyncSharedMemory&)
	// Output	: None
	// Summury	: This method is for blocking copy this class to other.
	////////////////////////////////////////////////////////////////////////////////////////////
	void operator = (_CSyncSharedMemory& src) {}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _createMemory
	// Input	: Memory size(int)
	// Output	: result(bool)
	// Summury	: Create memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	bool _createMemory(int size) {

		_poMemory = malloc(size);
		if (!_poMemory) return false;

		_size = size;
		memset(_poMemory, 0, size);

		return true;
	}



	////////////////////////////////////////////////////////////////////////////////////////////
	// Method	: _deleteMemory
	// Input	: None
	// Output	: None
	// Summury	: Delete memory block.
	////////////////////////////////////////////////////////////////////////////////////////////
	void _deleteMemory() {

		if (_poMemory) {
			free(_poMemory);
			_size = -1;
			_poMemory = 0;
		}
	}

	// Member ////////////////////////////////////////////////////////
public:

protected:

private:
	int _size;
	void* _poMemory;
	std::mutex _mutex;
};





CSyncSharedMemory::CSyncSharedMemory() {

	_poSyncMemory = new _CSyncSharedMemory;
}



CSyncSharedMemory::~CSyncSharedMemory() {

	delete _poSyncMemory;
}



bool CSyncSharedMemory::CreateSharedMemory(int size) {

	return _poSyncMemory->CreateSharedMemory(size);
}



void CSyncSharedMemory::GetSharedMemory(void* buf) {

	_poSyncMemory->GetSharedMemory(buf);
}



void CSyncSharedMemory::SetSharedMemory(void* buf) {

	_poSyncMemory->SetSharedMemory(buf);
}


int CSyncSharedMemory::GetSharedMemorySize() {

	return _poSyncMemory->GetSharedMemorySize();
}